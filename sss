using System;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace NewServiceApp
{
    public class ApiXmlClient
    {
        public async Task<string> GetResponseFromNewAPI(string xml)
        {
            string endpointUrl = ConfigurationManager.AppSettings["MessageConverterURL"];
            string response = "";

            try
            {
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.CheckCertificateRevocationList = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                // TEMP TRANSCODE override
                var x = XDocument.Parse(xml);
                var tc = x.Descendants("TranCode").FirstOrDefault();
                if (tc != null)
                {
                    tc.Value = "1001";
                    xml = x.ToString(SaveOptions.DisableFormatting);
                }

                var cert = CertificateLoader.GetCertificate();
                DumpCert(cert);

                var handler = new WebRequestHandler();
                if (cert != null)
                    handler.ClientCertificates.Add(cert);

                // DEV only: bypass SSL validation
                handler.ServerCertificateValidationCallback = (sender, cert2, chain, errors) =>
                {
                    Console.WriteLine($"Bypassing SSL validation for: {cert2?.Subject}");
                    return true;
                };

                using (var client = new HttpClient(handler))
                {
                    client.BaseAddress = new Uri(endpointUrl);
                    client.Timeout = TimeSpan.FromSeconds(30);

                    var content = new StringContent(xml, System.Text.Encoding.UTF8, "application/xml");
                    var resp = await client.PostAsync("", content);
                    response = await resp.Content.ReadAsStringAsync();

                    Console.WriteLine($"HTTP {(int)resp.StatusCode} {resp.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }

            return response;
        }

        private void DumpCert(X509Certificate2 cert)
        {
            if (cert == null) return;
            Console.WriteLine($"Cert: {cert.Subject}");
            Console.WriteLine($"HasPK={cert.HasPrivateKey}  Valid={cert.NotBefore:u}..{cert.NotAfter:u}");
        }
    }
}
