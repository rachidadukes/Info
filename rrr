using System;
using System.Net;
using System.Net.Http;
using System.Net.Security;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

public async Task<string> GetResponseFromNewAPI(string xml)
{
    // Force TLS1.2 runtime-wide (good on 4.7.2)
    ServicePointManager.Expect100Continue = true;
    ServicePointManager.CheckCertificateRevocationList = true;
    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

    var cert = CertificateLoader.GetCertificate(); // your method
    Console.WriteLine($"Cert: {cert.Subject}  HasPK={cert.HasPrivateKey}  Valid={cert.NotBefore:u}..{cert.NotAfter:u}");

    var handler = new HttpClientHandler
    {
        ClientCertificateOptions = ClientCertificateOption.Manual,
        SslProtocols = SslProtocols.Tls12
    };
    handler.ClientCertificates.Add(cert);

    // Optional: temporary probe to print server cert/chain issues
    handler.ServerCertificateCustomValidationCallback = (req, serverCert, chain, errors) =>
    {
        Console.WriteLine($"ServerCert errors: {errors}");
        if (chain != null)
        {
            foreach (var s in chain.ChainStatus)
                Console.WriteLine($"ChainStatus: {s.Status} - {s.StatusInformation}");
        }
        return errors == SslPolicyErrors.None; // DO NOT relax validation in prod
    };

    using (var client = new HttpClient(handler))
    {
        client.BaseAddress = new Uri(settings["MessageConverterURL"]);
        client.Timeout = TimeSpan.FromSeconds(90);

        using (var content = new StringContent(xml, Encoding.UTF8, "application/xml"))
        {
            try
            {
                Console.WriteLine($"POST {client.BaseAddress}");
                var resp = await client.PostAsync("", content).ConfigureAwait(false);
                var body = await resp.Content.ReadAsStringAsync().ConfigureAwait(false);

                if (!resp.IsSuccessStatusCode)
                    throw new HttpRequestException($"HTTP {(int)resp.StatusCode} {resp.ReasonPhrase}\n{body}");

                return body;
            }
            catch (TaskCanceledException tcex)
            {
                Console.WriteLine("TaskCanceledException (likely timeout or TLS stall).");
                if (tcex.InnerException != null) Console.WriteLine("Inner: " + tcex.InnerException);
                throw;
            }
            catch (HttpRequestException hrex)
            {
                Console.WriteLine("HttpRequestException:");
                Console.WriteLine(hrex);
                if (hrex.InnerException != null) Console.WriteLine("Inner: " + hrex.InnerException);
                throw;
            }
            catch (AuthenticationException aex)
            {
                Console.WriteLine("AuthenticationException (TLS handshake): " + aex.Message);
                if (aex.InnerException != null) Console.WriteLine("Inner: " + aex.InnerException.Message);
                throw;
            }
        }
    }
}
