  var xml = "<test>hello</test>";
    var url = "https://your-nonprod-service-url/";

    var result = HttpTestHelpers.GetResponseFromNewAPI(url, xml).GetAwaiter().GetResult();
    Console.WriteLine(result);
}



=================================
using System;
using System.Net;
using System.Net.Http;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

public static class HttpTestHelpers
{
    // Non-production client that ignores all SSL validation
    public static HttpClient CreateTestHttpClient(string baseAddress, TimeSpan? timeout = null)
    {
        var handler = new HttpClientHandler
        {
            // .NET Framework 4.7 way â€” bypass all cert checks
            ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
        };

        var client = new HttpClient(handler)
        {
            BaseAddress = new Uri(baseAddress),
            Timeout = timeout ?? TimeSpan.FromSeconds(30)
        };

        return client;
    }

    public static async Task<string> GetResponseFromNewAPI(string endpointUrl, string xml)
    {
        // Enforce TLS 1.2 for compatibility
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

        string body = "";

        try
        {
            using (var client = CreateTestHttpClient(endpointUrl))
            using (var content = new StringContent(xml ?? string.Empty, Encoding.UTF8, "application/xml"))
            {
                Console.WriteLine($"POST {client.BaseAddress}");
                var resp = await client.PostAsync("", content);

                body = await resp.Content.ReadAsStringAsync(); // no token overload in .NET 4.7

                Console.WriteLine($"HTTP {(int)resp.StatusCode} {resp.ReasonPhrase}");

                if (!resp.IsSuccessStatusCode)
                    throw new HttpRequestException($"HTTP {(int)resp.StatusCode} {resp.ReasonPhrase}\n{body}");
            }
        }
        catch (TaskCanceledException tex)
        {
            Console.WriteLine($"Timeout: {tex.Message}");
        }
        catch (HttpRequestException hrex)
        {
            Console.WriteLine($"HTTP Request Error: {hrex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General Error: {ex.Message}");
        }

        return body;
    }
}
