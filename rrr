private static async Task RunInteractiveLoopAsync()
{
    while (true)
    {
        // 1) Decide which service and print a header that persists
        var whichService = UserSelections.CurrentOrNewService() ? "New Service" : "Current Service";
        ConsoleDisplayHelper.PrintServiceHeader(whichService);

        // 2) Collect input (your existing method)
        var userInput = await UserSelections.CollectUserInput();
        if (userInput is null)
        {
            if (!AnsiConsole.Confirm("Try again?")) break;
            AnsiConsole.Write(new Rule().RuleStyle("grey"));
            continue;
        }

        // 3) Show sticky summary (persists on screen)
        ConsoleDisplayHelper.PrintStickySummary(userInput, whichService);

        // 4) Build request and call host (your existing methods/classes)
        var xmlRequest  = await UserSelections.GenerateXmlRequest(userInput);
        var transaction = new ProcessTransaction();
        var xmlResponse = await transaction.SendToHost(xmlRequest);

        // 5) Save request/response (your existing saver)
        var saver = new SaveRequestResponse();
        await saver.SaveNewRequestResponse(userInput, whichService, xmlRequest, xmlResponse);

        // 6) Compact XML previews with optional expand
        ConsoleDisplayHelper.RenderXmlSummary(xmlRequest, xmlResponse, previewLines: 24, offerExpand: true);

        // 7) Record + render session history
        ConsoleDisplayHelper.AddToHistory(userInput, whichService);
        ConsoleDisplayHelper.RenderHistory();

        // 8) Continue?
        if (!AnsiConsole.Confirm("Do you want to process another transaction?"))
            break;

        AnsiConsole.Write(new Rule("[green]Next Transaction[/]").RuleStyle("grey"));
    }
}
