


private static async Task RunInteractiveLoopAsync()
{
    while (true)
    {
        // Decide which service (uses your existing method)
        var whichService = CurrentOrNewService() ? "New Service" : "Current Service";
        AnsiConsole.MarkupLine($"[blue]Calling {whichService}[/]");

        // Collect all inputs (your existing method)
        var userInput = await CollectUserInput();
        if (userInput is null)
        {
            // CollectUserInput already prints why; let user retry or quit
            if (!AnsiConsole.Confirm("Try again?")) break;
            AnsiConsole.Write(new Rule().RuleStyle("grey"));
            continue;
        }

        // (Optional but useful) print a compact summary that stays on screen
        AnsiConsole.Write(new Rule("[green]Selections[/]").RuleStyle("grey"));
        AnsiConsole.MarkupLine($"[yellow]Environment:[/] {userInput.Environment}");
        AnsiConsole.MarkupLine($"[yellow]AccountType:[/] {userInput.AccountType}");
        AnsiConsole.MarkupLine($"[yellow]AccountNumber:[/] {userInput.AccountNumber}");
        AnsiConsole.MarkupLine($"[yellow]Transaction:[/] {userInput.TranName} (Code: {userInput.TranCode})");
        AnsiConsole.MarkupLine($"[yellow]Amount:[/] {userInput.TransAmt}");
        AnsiConsole.Write(new Rule().RuleStyle("grey"));

        // Generate XML & call host (your existing methods/classes)
        var xmlRequest  = await GenerateXmlRequest(userInput);
        var transaction = new ProcessTransaction();
        var xmlResponse = await transaction.SendToHost(xmlRequest);

        // Save (your existing class)
        var saver = new SaveRequestResponse();
        saver.SaveNewRequestResponse(userInput, whichService, xmlRequest, xmlResponse);

        // Ask whether to run another transaction
        if (!AnsiConsole.Confirm("Do you want to process another transaction?"))
            break;

        // Visual separator between runs
        AnsiConsole.Write(new Rule("[green]Next Transaction[/]").RuleStyle("grey"));
    }
}
=========================================

public static async Task Main(string[] args)
{
    try
    {
        HostRoutingConfig.Load();

        // ðŸ‘‡ New: run the interactive loop
        await RunInteractiveLoopAsync();

        // If you have any final summary/logging, keep it after the loop:
        AppLogger.Summary.PrintSummary();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error sending SOAP request: {ex.Message}");
    }
}



============================
