using Spectre.Console;
using System.Net.Http;
using System.Net.Security;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;

public static class ApiHealth
{
    public static async Task<bool> IsApiHealthyAsync(string baseUrl, bool ignoreCert = true)
    {
        try
        {
            var handler = new HttpClientHandler
            {
                // ‚úÖ Use new callback name in .NET 8+ / .NET 9
                ServerCertificateCustomValidationCallback = ignoreCert
                    ? HttpClientHandler.DangerousAcceptAnyServerCertificateValidator // DEV only
                    : (HttpRequestMessage, cert, chain, errors) => errors == SslPolicyErrors.None,

                // Support TLS 1.2 and 1.3
                SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13
            };

            using var client = new HttpClient(handler)
            {
                Timeout = TimeSpan.FromSeconds(5)
            };

            var healthUrl = baseUrl.EndsWith("/") ? $"{baseUrl}health" : $"{baseUrl}/health";

            var resp = await client.GetAsync(healthUrl);

            // üé® Pretty output
            var color = resp.IsSuccessStatusCode ? "green" : "red";
            AnsiConsole.MarkupLine($"[{color}]HTTP {(int)resp.StatusCode} {resp.ReasonPhrase}[/]");

            if (!resp.IsSuccessStatusCode)
            {
                var content = await resp.Content.ReadAsStringAsync();
                if (!string.IsNullOrWhiteSpace(content))
                    AnsiConsole.MarkupLine($"[grey]{content.Trim()}[/]");
            }

            return resp.IsSuccessStatusCode;
        }
        catch (HttpRequestException ex)
        {
            AnsiConsole.MarkupLine($"[red]‚ùå Health check failed: {ex.Message}[/]");
            if (ex.InnerException != null)
                AnsiConsole.MarkupLine($"[grey]{ex.InnerException.Message}[/]");
        }
        catch (Exception ex)
        {
            AnsiConsole.MarkupLine($"[red]‚ùå Unexpected error: {ex.Message}[/]");
        }

        return false;
    }
}
