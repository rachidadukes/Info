using Spectre.Console;
using System.Net.Http;
using System.Security.Authentication;
using System.Text;

namespace RestServiceApp;

public class ApiXmlClient
{
    public async Task<string> GetResponseFromNewAPI(string xml)
    {
        string response = string.Empty;

        // 1️⃣ Get endpoint from config or your routing helper
        var settings = HostRoutingConfig.GetHostSettings();
        var endpointUrl = settings["MessageConverterURL"];

        if (string.IsNullOrEmpty(endpointUrl))
            throw new InvalidOperationException("MessageConverterURL not configured in appsettings.json.");

        // 2️⃣ Run health check first
        var diag = await HealthProbe.DiagnoseAsync(endpointUrl, "/health");
        HealthReporter.Render(diag);

        if (!diag.HttpOk)
        {
            AnsiConsole.MarkupLine("[red bold]❌ API Health Check failed. Aborting request.[/]");
            return string.Empty;
        }

        AnsiConsole.MarkupLine("[green bold]✅ API is reachable. Proceeding with XML request...[/]");

        try
        {
            // 3️⃣ Read your dev flag
            bool.TryParse(settings["IgnoreServerCertificateErrors"], out bool ignoreCert);

            // 4️⃣ Configure HTTP handler for .NET 9
            var handler = new HttpClientHandler
            {
                SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13,
                ServerCertificateCustomValidationCallback = ignoreCert
                    ? HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                    : (request, cert, chain, errors) => errors == System.Net.Security.SslPolicyErrors.None
            };

            if (ignoreCert)
                AnsiConsole.MarkupLine("[yellow]⚠️ Ignoring certificate validation (DEV ONLY).[/]");

            using var client = new HttpClient(handler)
            {
                Timeout = TimeSpan.FromSeconds(30)
            };

            // 5️⃣ Build XML content
            using var content = new StringContent(xml, Encoding.UTF8, "application/xml");

            var resp = await client.PostAsync(endpointUrl, content);
            response = await resp.Content.ReadAsStringAsync();

            AnsiConsole.MarkupLine($"[grey]HTTP {(int)resp.StatusCode} {resp.ReasonPhrase}[/]");

            if (!resp.IsSuccessStatusCode)
                throw new HttpRequestException($"HTTP {(int)resp.StatusCode} {resp.ReasonPhrase}");

            AnsiConsole.MarkupLine("[green]✅ Request completed successfully.[/]");
        }
        catch (TaskCanceledException)
        {
            AnsiConsole.MarkupLine("[red]⏱️ Request timed out (possibly TLS stall).[/]");
        }
        catch (Exception ex)
        {
            AnsiConsole.MarkupLine($"[red]❌ Unexpected error: {ex.Message}[/]");
        }

        return response;
    }
}
