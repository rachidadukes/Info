private static async Task<bool> DiagnoseTlsAndHttpAsync(
    Uri healthUri,
    ApiHealthDiag diag,
    CancellationToken ct)
{
    try
    {
        // Create handler and HttpClient
        var handler = CreateHandler(out var lastTlsErrors, out var serverCert);
        using var client = new HttpClient(handler)
        {
            Timeout = TimeSpan.FromSeconds(HttpTimeoutSeconds)
        };

        // Perform HEAD or GET request
        var resp = await TryHeadOrGetAsync(client, healthUri, lastTlsErrors, serverCert, diag, ct)
            .ConfigureAwait(false);

        // If no response => TLS or HTTP failed
        if (resp == null)
        {
            diag.TlsOk = false;

            // Convert enum (SslPolicyErrors) to string
            string tlsErrorText = lastTlsErrors == System.Net.Security.SslPolicyErrors.None
                ? "TLS handshake failed or no response."
                : lastTlsErrors.ToString();

            diag.TlsErrors = tlsErrorText;
            diag.CertSummary = serverCert == null ? "-" : SummarizeCert(serverCert);
            diag.HttpOk = false;
            diag.Reason = "No response received.";
            diag.PhaseFailed = "TLS";
            return false;
        }

        // TLS succeeded if we got a valid response
        diag.TlsOk = true;
        diag.TlsErrors = lastTlsErrors == System.Net.Security.SslPolicyErrors.None
            ? "None"
            : lastTlsErrors.ToString();
        diag.CertSummary = SummarizeCert(serverCert);

        // HTTP result
        diag.StatusCode = ((int)resp.StatusCode).ToString(); // store as string if diag.StatusCode is string
        diag.Reason = resp.ReasonPhrase;
        diag.HttpOk = resp.IsSuccessStatusCode;

        // Read response body (first 512 chars max)
        string body = await resp.Content.ReadAsStringAsync(ct).ConfigureAwait(false);
        diag.ResponseSample = body.Length <= 512 ? body : body.Substring(0, 512);

        if (!diag.HttpOk)
        {
            diag.PhaseFailed = "HTTP";
            return false;
        }

        return true;
    }
    catch (Exception ex)
    {
        diag.TlsOk = false;
        diag.HttpOk = false;
        diag.PhaseFailed = "TLS/HTTP";
        diag.Reason = ex.InnerException?.Message ?? ex.Message;
        return false;
    }
}



====================


if (!await DiagnoseTlsAndHttpAsync(healthUri, diag, ct).ConfigureAwait(false))
    return Finalize(sw, diag);




