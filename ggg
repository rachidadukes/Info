using System.Collections.Specialized;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ApiClientLib;

public sealed class ApiXmlClient
{
    private readonly HttpClient _http;

    // no DI/factory needed
    public ApiXmlClient(bool configureHandlerForIgnoreCert = true)
    {
        // read settings INSIDE the library
        NameValueCollection settings = HostRoutingConfig.GetHostSettings()
            ?? throw new InvalidOperationException("Host settings are missing.");

        var url = settings["MessageConverterURL"]?.Trim()
            ?? throw new InvalidOperationException("MessageConverterURL is missing in host settings.");

        bool.TryParse(settings["IgnoreServerCertificateErrors"], out var ignoreCert);

        var handler = new HttpClientHandler();
        if (configureHandlerForIgnoreCert && ignoreCert)
        {
            handler.ServerCertificateCustomValidationCallback = (_, __, ___, ____) => true;
        }

        _http = new HttpClient(handler, disposeHandler: true);
        _endpointUrl = url;
    }

    private readonly string _endpointUrl;

    public async Task<string> SendAsync(string xml, CancellationToken ct = default)
    {
        using var content = new StringContent(xml, Encoding.UTF8, "application/xml");
        using var resp = await _http.PostAsync(_endpointUrl, content, ct).ConfigureAwait(false);
        resp.EnsureSuccessStatusCode();
        return await resp.Content.ReadAsStringAsync(ct).ConfigureAwait(false);
    }
}
