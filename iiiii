private static SocketsHttpHandler CreateHandler(
    out SslPolicyErrors lastTlsErrors,
    out X509Certificate2? serverCert)
{
    lastTlsErrors = SslPolicyErrors.None;
    serverCert = null;

    var handler = new SocketsHttpHandler
    {
        PooledConnectionLifetime = TimeSpan.FromMinutes(5),
        SslOptions = new SslClientAuthenticationOptions
        {
            EnabledSslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13,
            // ❗TEMPORARY: accept all certs (ignore validation)
            RemoteCertificateValidationCallback = (sender, cert, chain, errors) =>
            {
                lastTlsErrors = errors;
                if (cert is X509Certificate2 x509)
                    serverCert = x509;
                return true; // always trust
            }
        }
    };

    return handler;
}
