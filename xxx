

using Spectre.Console;
using System.Net.Http;
using System.Net.Security;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;
using System.Text;

internal class Program
{
    private const string ApiUrl = "https://swydcdvencaej01.nfcu.net/EncoreCore/api/MessageConverter/ConvertMessage";
    private const string ClientCertSubjectName = "LTCC483A490BE4.nfcu.net";
    private const StoreLocation ClientCertStoreLocation = StoreLocation.LocalMachine;
    private const StoreName ClientCertStoreName = StoreName.My;

    private static async Task<int> Main()
    {
        AnsiConsole.Clear();
        AnsiConsole.MarkupLine("[bold cyan]== Certificate & Endpoint Probe ==[/]");

        // 1) Check certificate health
        var (certStatus, cert, certMsg) = FindClientCertificate(
            ClientCertSubjectName, ClientCertStoreName, ClientCertStoreLocation);

        var certTable = new Table().Border(TableBorder.Rounded);
        certTable.AddColumn("[bold yellow]Check[/]");
        certTable.AddColumn("[bold green]Result[/]");
        certTable.AddRow("Certificate Health", certStatus.ToString());
        certTable.AddRow("Details", certMsg);
        AnsiConsole.Write(certTable);

        if (certStatus == ProbeStatus.Error || cert is null)
        {
            AnsiConsole.MarkupLine("[red]❌ Certificate not found or invalid.[/]");
            return 2;
        }

        // 2) XML API call
        AnsiConsole.MarkupLine("\n[bold cyan]== XML API Call Test ==[/]");
        var xmlPayload = @"<ConvertMessageRequest>
  <ClientId>HealthCheck</ClientId>
  <Payload>Test</Payload>
</ConvertMessageRequest>";

        var xmlResult = await PostXmlAsync(ApiUrl, xmlPayload, cert);

        var callTable = new Table().Border(TableBorder.Rounded);
        callTable.AddColumn("[bold yellow]Check[/]");
        callTable.AddColumn("[bold green]Result[/]");
        callTable.AddRow("XML Call Result", xmlResult.Status.ToString());
        callTable.AddRow("Message", xmlResult.Message);
        AnsiConsole.Write(callTable);

        // 3) Summary section
        var summary = new Table().Border(TableBorder.Heavy);
        summary.AddColumn("[bold blue]Summary[/]");
        summary.AddColumn("[bold white]Value[/]");
        summary.AddRow("Certificate Subject", cert.Subject);
        summary.AddRow("Validity", $"{cert.NotBefore:u} - {cert.NotAfter:u}");
        summary.AddRow("Certificate Health", certStatus.ToString());
        summary.AddRow("XML API Call", xmlResult.Status.ToString());
        AnsiConsole.Write(summary);

        AnsiConsole.MarkupLine("[bold green]✔ Probe complete.[/]");
        return 0;
    }

    // ----------------------------------------------------------
    //  Certificate validation logic
    // ----------------------------------------------------------
    private static (ProbeStatus Status, X509Certificate2? Cert, string Message) FindClientCertificate(
        string subjectOrCn, StoreName storeName, StoreLocation storeLocation)
    {
        try
        {
            using var store = new X509Store(storeName, storeLocation);
            store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);

            var matches = store.Certificates
                .Find(X509FindType.FindBySubjectDistinguishedName, subjectOrCn, validOnly: false);

            if (matches.Count == 0)
                matches = store.Certificates
                    .Find(X509FindType.FindBySubjectName, subjectOrCn, validOnly: false);

            if (matches.Count == 0)
                return (ProbeStatus.Error, null, $"Not found in {storeLocation}/{storeName} by subject '{subjectOrCn}'.");

            X509Certificate2? best = null;
            foreach (var c in matches)
            {
                if (!c.HasPrivateKey) continue;
                if (best == null || c.NotBefore > best.NotBefore) best = c;
            }
            best ??= matches[0];

            var validity =
                best.NotBefore > DateTime.UtcNow ? "NotYetValid" :
                best.NotAfter < DateTime.UtcNow ? "Expired" : "Valid";

            var hasPk = best.HasPrivateKey ? "Yes" : "No";
            var status = validity == "Valid" ? ProbeStatus.Success : ProbeStatus.Error;

            return (status, best,
                $"Thumbprint={best.Thumbprint}\nSubject={best.Subject}\nHasPrivateKey={hasPk}\nValidity={validity}\n" +
                $"NotBefore={best.NotBefore:u}\nNotAfter={best.NotAfter:u}");
        }
        catch (Exception ex)
        {
            return (ProbeStatus.Error, null, $"Exception reading store: {ex.Message}");
        }
    }

    // ----------------------------------------------------------
    //  XML POST request logic
    // ----------------------------------------------------------
    private static async Task<ProbeResult> PostXmlAsync(string url, string xml, X509Certificate2? clientCertificate)
    {
        try
        {
            var handler = new HttpClientHandler
            {
                SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13,
                CheckCertificateRevocationList = true,
                ServerCertificateCustomValidationCallback = (req, cert, chain, errors) =>
                {
                    AnsiConsole.MarkupLine($"[grey][TLS] Errors={errors}[/]");
                    return errors == SslPolicyErrors.None;
                }
            };

            if (clientCertificate != null)
            {
                handler.ClientCertificates.Add(clientCertificate);
                handler.ClientCertificateOptions = ClientCertificateOption.Manual;
            }

            using var client = new HttpClient(handler);
            var content = new StringContent(xml, Encoding.UTF8, "application/xml");
            content.Headers.ContentType.MediaType = "text/xml";

            var req = new HttpRequestMessage(HttpMethod.Post, url) { Content = content };
            var response = await client.SendAsync(req);
            var body = await response.Content.ReadAsStringAsync();
            if (body.Length > 400) body = body[..400] + "...";

            return new ProbeResult(
                response.IsSuccessStatusCode ? ProbeStatus.Success : ProbeStatus.HttpError,
                $"HTTP {(int)response.StatusCode} {response.ReasonPhrase}; Body={body}");
        }
        catch (HttpRequestException hre)
        {
            return new ProbeResult(ProbeStatus.NetworkError, $"HttpRequestException: {hre.Message}");
        }
        catch (AuthenticationException ae)
        {
            return new ProbeResult(ProbeStatus.HandshakeFailed, $"TLS Handshake failed: {ae.Message}");
        }
        catch (Exception ex)
        {
            return new ProbeResult(ProbeStatus.Error, ex.Message);
        }
    }

    // ----------------------------------------------------------
    //  Helper types
    // ----------------------------------------------------------
    private record ProbeResult(ProbeStatus Status, string Message);

    private enum ProbeStatus
    {
        Success,
        HttpError,
        Timeout,
        NetworkError,
        HandshakeFailed,
        Error
    }
}
