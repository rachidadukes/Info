using System;
using System.IO;
using System.Text;

namespace CertHealthCheckApp.Probing
{
    public class ProbeLogger
    {
        public static ProbeLogger? Current { get; private set; }

        public string LogPath { get; }

        private readonly StreamWriter _writer;

        private ProbeLogger(string baseName)
        {
            // ✅ Ensure log directory exists
            var logDir = @"C:\Temp\CertProbeLogs";
            Directory.CreateDirectory(logDir);

            // ✅ Unique file per run
            LogPath = Path.Combine(logDir, $"{baseName}_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.log");

            _writer = new StreamWriter(LogPath, append: false, Encoding.UTF8) { AutoFlush = true };

            Console.WriteLine($"# Probe session started: {DateTime.Now:u}");
        }

        public static ProbeLogger Start(string baseName = "probe")
        {
            var logger = new ProbeLogger(baseName);
            Current = logger;

            Console.WriteLine($"[grey]Log file created at: {logger.LogPath}[/]");
            return logger;
        }

        public void LogCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 cert)
        {
            WriteLine("=== Certificate Info ===");
            WriteLine($"Subject      : {cert.Subject}");
            WriteLine($"Thumbprint   : {cert.Thumbprint}");
            WriteLine($"HasPrivateKey: {cert.HasPrivateKey}");
            WriteLine($"NotBefore    : {cert.NotBefore:u}");
            WriteLine($"NotAfter     : {cert.NotAfter:u}");
            WriteLine("========================");
        }

        public void LogXmlResult(string status, string message)
        {
            WriteLine("=== XML API Result ===");
            WriteLine($"Status : {status}");
            WriteLine($"Message: {message}");
            WriteLine("=======================");
        }

        public void LogException(Exception ex, string context)
        {
            WriteLine("=== Exception ===");
            WriteLine($"Context : {context}");
            WriteLine($"Type    : {ex.GetType().Name}");
            WriteLine($"Message : {ex.Message}");
            WriteLine("==================");
        }

        public void WriteLine(string message)
        {
            Console.WriteLine(message);
            _writer.WriteLine(message);
        }
    }
}
