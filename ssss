// XML POST request logic
public static async Task<ProbeResult> PostXmlAsync(string url, string xml, X509Certificate2? clientCertificate)
{
    try
    {
        var handler = new HttpClientHandler
        {
            SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls13,
            CheckCertificateRevocationList = true,
            ServerCertificateCustomValidationCallback = (req, cert, chain, errors) =>
            {
                AnsiConsole.MarkupLine($"[grey][TLS] Errors={errors}[/]");
                return errors == SslPolicyErrors.None;
            }
        };

        // Attach client certificate if available
        if (clientCertificate != null)
        {
            handler.ClientCertificates.Add(clientCertificate);
            handler.ClientCertificateOptions = ClientCertificateOption.Manual;
        }

        using var client = new HttpClient(handler);
        var content = new StringContent(xml, Encoding.UTF8, "application/xml");

        var req = new HttpRequestMessage(HttpMethod.Post, url)
        {
            Content = content
        };

        // === Send request ===
        var response = await client.SendAsync(req);
        var body = await response.Content.ReadAsStringAsync();

        if (body.Length > 400)
            body = body[..400] + "...";

        var status = response.IsSuccessStatusCode
            ? ProbeStatus.Success
            : ProbeStatus.HttpError;

        var message = $"HTTP {(int)response.StatusCode} {response.ReasonPhrase}\nBody={body}";

        // âœ… Log the XML call result to file
        ProbeLogger.Current?.LogXmlResult(status.ToString(), message);

        return new ProbeResult(status, message);
    }
    catch (HttpRequestException hre)
    {
        ProbeLogger.Current?.LogException(hre, "PostXmlAsync");
        return new ProbeResult(ProbeStatus.NetworkError, $"HttpRequestException: {hre.Message}");
    }
    catch (AuthenticationException ae)
    {
        ProbeLogger.Current?.LogException(ae, "TLS Handshake");
        return new ProbeResult(ProbeStatus.HandshakeFailed, $"TLS Handshake failed: {ae.Message}");
    }
    catch (Exception ex)
    {
        ProbeLogger.Current?.LogException(ex, "PostXmlAsync");
        return new ProbeResult(ProbeStatus.Error, $"Unexpected error: {ex.Message}");
    }
}
