
public static bool TryFindClientCertificate(
    string subjectOrCn,
    StoreName storeName,
    StoreLocation storeLocation,
    out X509Certificate2? cert,
    out string message)
{
    cert = null;
    message = "";

    try
    {
        using var store = new X509Store(storeName, storeLocation);
        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);

        var matches = store.Certificates.Find(X509FindType.FindBySubjectDistinguishedName, subjectOrCn, validOnly: false);
        if (matches.Count == 0)
            matches = store.Certificates.Find(X509FindType.FindBySubjectName, subjectOrCn, validOnly: false);

        if (matches.Count == 0)
        {
            message = $"No certificate found with subject/CN '{subjectOrCn}' in {storeLocation}\\{storeName}.";
            return false;
        }

        X509Certificate2? best = null;
        foreach (var c in matches)
        {
            if (!c.HasPrivateKey) continue;
            if (best == null || c.NotBefore > best.NotBefore)
                best = c;
        }
        cert = best ?? matches[0];

        var validity =
            cert.NotBefore > DateTime.UtcNow ? "NotYetValid" :
            cert.NotAfter  < DateTime.UtcNow ? "Expired" : "Valid";

        message = $"Thumbprint={cert.Thumbprint}; Subject={cert.Subject}; HasPrivateKey={cert.HasPrivateKey}; " +
                  $"Validity={validity}; NotBefore={cert.NotBefore:u}; NotAfter={cert.NotAfter:u}";
        return true;
    }
    catch (Exception ex)
    {
        message = $"Exception while reading {storeLocation}\\{storeName}: {ex.Message}";
        cert = null;
        return false;
    }
}
