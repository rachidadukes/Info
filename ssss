public void LogSupportChecklist(string apiUrl, System.Security.Cryptography.X509Certificates.X509Certificate2? cert)
{
    WriteLine("=== Certificate Support Team â€“ Questions & Context ===");
    WriteLine($"API URL: {apiUrl}");
    if (cert != null)
    {
        WriteLine("Detected client cert (from this run):");
        WriteLine($"  Subject      : {cert.Subject}");
        WriteLine($"  Thumbprint   : {cert.Thumbprint}");
        WriteLine($"  NotBefore    : {cert.NotBefore:u}");
        WriteLine($"  NotAfter     : {cert.NotAfter:u}");
    }
    WriteLine("Please confirm/provide the following:");
    WriteLine("  1) Is the endpoint mTLS (client certificate) required for this URL?");
    WriteLine("  2) Exact client certificate Subject/CN you expect (include SAN DNS entries if enforced).");
    WriteLine("  3) Exact issuing CA chain you require (root + all intermediates) and where to download them.");
    WriteLine("  4) Accepted client certificate issuers (ACCEPT list) and any pinning/Thumbprint requirements.");
    WriteLine("  5) Required TLS protocol versions (e.g., TLS 1.2/1.3) and any blocked cipher suites.");
    WriteLine("  6) Server certificate hostname/SAN you expect for SNI; is SNI mandatory?");
    WriteLine("  7) Revocation checks required? OCSP/CRL endpoints and whether they must be reachable.");
    WriteLine("  8) Any IP allowlists/firewall rules needed for our callers? (source IPs to allow).");
    WriteLine("  9) HTTP details: method, path, required headers, Content-Type, and a minimal valid payload.");
    WriteLine(" 10) Expected success status code/body for a health/ping call.");
    WriteLine(" 11) Environment separation: distinct certs/URLs for TEST/INT/PROD? How to request access.");
    WriteLine(" 12) Certificate rollover/renewal policy and notice window (and test window for cutover).");
    WriteLine(" 13) Rate limits, auth beyond mTLS (e.g., API key/JWT), and any proxy requirements.");
    WriteLine(" 14) Contact/escalation path and after-hours on-call for certificate/handshake issues.");
    WriteLine("=======================================================");
}
