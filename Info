
private void ProcessNewRequestWindowX_Loaded(object sender, RoutedEventArgs e)
{
    if (selectedOriginalRequest != null)
    {
        ReadNewRequest();
        UpdatesomeControlsWithMyparsonalData();
        GenerateForm();             // Original
        GenerateEditableForm();     // New input
    }
}


=======================
private void GenerateEditableForm()
{
    NewDataFormGrid.Children.Clear();
    NewDataFormGrid.RowDefinitions.Clear();

    var props = typeof(NewCreditDebitRqModel).GetProperties();
    var orderedProps = props
        .OrderBy(p => Array.IndexOf(FieldConfiguration.PreferredPropertyOrder, p.Name))
        .ThenBy(p => p.Name)
        .ToList();

    int row = 0;
    foreach (var prop in orderedProps)
    {
        string name = prop.Name;
        if (FieldConfiguration.HiddenFields.Contains(name)) continue;

        string labelText = FieldConfiguration.DisplayNames.TryGetValue(name, out var friendly)
            ? friendly
            : name;

        NewDataFormGrid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });

        // Label
        var label = new Label
        {
            Content = labelText,
            Margin = new Thickness(0, 5, 10, 5),
            VerticalAlignment = VerticalAlignment.Center,
            Foreground = FieldConfiguration.HighlightFields.Contains(name) ? Brushes.DarkRed : Brushes.Black
        };
        Grid.SetRow(label, row);
        Grid.SetColumn(label, 0);

        // TextBox
        var textbox = new TextBox
        {
            Width = 400,
            Margin = new Thickness(0, 5, 0, 5),
            Tag = name
        };
        Grid.SetRow(textbox, row);
        Grid.SetColumn(textbox, 1);

        NewDataFormGrid.Children.Add(label);
        NewDataFormGrid.Children.Add(textbox);

        row++;
    }

    if (NewDataFormGrid.ColumnDefinitions.Count == 0)
    {
        NewDataFormGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(180) });
        NewDataFormGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
    }
}
