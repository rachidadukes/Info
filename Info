<ProgressBar Height="20"
             Minimum="0"
             Maximum="{Binding MaxItems}"
             Value="{Binding ProgressValue}"
             Margin="10"
             Foreground="Green"
             Visibility="Visible"/>


========================



private readonly RetrieveLogsByYearManager _logsManager;
private readonly ProgressHandler<RequestResponseLogModel> _progressHandler = new();

public RetrieveLogsByYearWindow()
{
    InitializeComponent();
    DataContext = _progressHandler; // Bind progress bar to this
    _logsManager = new RetrieveLogsByYearManager(new SqlLogRepository()); // Or your DI instance
}


===================================
ProgressHandler.cs



using System;
using System.ComponentModel;

namespace HostLogsWPFApp.Helpers
{
    public class ProgressHandler<T> : INotifyPropertyChanged
    {
        private int _progressValue;
        private int _maxItems;

        public int ProgressValue
        {
            get => _progressValue;
            private set
            {
                _progressValue = value;
                OnPropertyChanged(nameof(ProgressValue));
            }
        }

        public int MaxItems
        {
            get => _maxItems;
            private set
            {
                _maxItems = value;
                OnPropertyChanged(nameof(MaxItems));
            }
        }

        public void SetMaxItems(int count)
        {
            MaxItems = count;
            ProgressValue = 0;
        }

        public IProgress<T> GetProgressReporter()
        {
            return new Progress<T>(_ =>
            {
                ProgressValue++;
            });
        }

        public void ReportProgress(T item)
        {
            ProgressValue++;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}


=======================================================
RetrieveLogsByYearManager.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace HostLogsWPFApp.Logic
{
    public class RetrieveLogsByYearManager
    {
        private readonly ISqlLogRepository _logRepository;

        public RetrieveLogsByYearManager(ISqlLogRepository logRepository)
        {
            _logRepository = logRepository ?? throw new ArgumentNullException(nameof(logRepository));
        }

        public async Task<List<RequestResponseLogModel>> GetLogsAsync(
            string environment,
            int year,
            int month,
            ProgressHandler<RequestResponseLogModel> progressHandler = null)
        {
            var logs = await _logRepository.GetLogsByYearAndMonthAsync(environment, year, month);

            progressHandler?.SetMaxItems(logs.Count);

            var result = new List<RequestResponseLogModel>();
            foreach (var log in logs)
            {
                result.Add(log);
                progressHandler?.ReportProgress(log);
            }

            return result;
        }

        public List<string> GetDistinctAccountNumbers(List<RequestResponseLogModel> logs)
        {
            return logs.Select(l => l.AccountNumber).Distinct().ToList();
        }

        public List<string> GetDistinctRequestTypes(List<RequestResponseLogModel> logs)
        {
            return logs.Select(l => l.RequestType).Distinct().ToList();
        }

        public List<string> GetDistinctAccessNumbers(List<RequestResponseLogModel> logs)
        {
            return logs.Select(l => l.AccessNumber).Distinct().ToList();
        }
    }
}
