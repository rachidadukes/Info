  private static async Task RetrieveMembersProfile()
  {
      ResultWrapper<MemberProfileRespDTO>? memberProfile;
      string? apiUrl;
      string envir;


      try
      {


          envir = "UNIT";
          apiUrl = FindUrl(envir);
          string AccessNumber = "15";
          MemberProfileRepository memberProfileRepository = new MemberProfileRepository();
          memberProfile = await memberProfileRepository.GetMemberProfileAsync(envir, apiUrl, AccessNumber);

          if (memberProfile?.Data != null && memberProfile.IsSuccess)
          {
              Console.WriteLine("Member data retrieved successfully.");                
              RetrieveAccounts(memberProfile, envir, AccessNumber); 
          }
          else
          {
              Console.WriteLine($"Failed to retrieve member data: {memberProfile?.ErrorMessage}");
          }
      }
      catch (Exception ex)
      {
          Console.WriteLine("Error retrieving data: " + ex.Message);
      }
  }

  private static void RetrieveAccounts(ResultWrapper<MemberProfileRespDTO>? memberProfile, string envir, string AccessNumber)
  {
      if (memberProfile == null || memberProfile.Data == null)
      {
          Console.WriteLine("No member profile data available.");
          return;
      }

      string directoryPath = @"C:\temp";
      Directory.CreateDirectory(directoryPath);

      string filePath = Path.Combine(directoryPath, $"Accounts_{envir}_{AccessNumber}.txt");

      List<AcctProfileDTO> accounts = memberProfile.Data.ProfileAccts ?? new List<AcctProfileDTO>();

      using (StreamWriter writer = new StreamWriter(filePath, append: true))
      {
          string header = "Environment, Access Number, Account Number, Account Type";
          writer.WriteLine(header);

          foreach (var acct in accounts)
          {
              string line = $"{envir}, {AccessNumber}, {acct.AccountNumber}, {acct.AcctType}";
              writer.WriteLine(line);
              Console.WriteLine($"Account: {acct.AccountNumber}, Type: {acct.AcctType}");
          }
      }
  }
