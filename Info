

===============================

<ProgressBar 
    Minimum="0" 
    Maximum="{Binding MaxItems}" 
    Value="{Binding ProgressValue}" 
    Height="20" 
    Margin="10"/>


====================

private async void LoadLogsButton_Click(object sender, RoutedEventArgs e)
{
    int year = int.Parse(selectedYear);
    int month = int.Parse(selectedMonth);

    var logs = await _manager.GetLogsAsync(environment, year, month, _progressHandler);
    LogsListView.ItemsSource = logs;
}

================================

private RetrieveLogsByYearManager _manager;
private ProgressBarHandler<RequestResponseLogModel> _progressHandler;

public RetrieveLogsByYearWindow()
{
    InitializeComponent();
    _manager = new RetrieveLogsByYearManager(new SqlLogRepository()); // Provide your implementation
    _progressHandler = new ProgressBarHandler<RequestResponseLogModel>();
    DataContext = _progressHandler;
}


=================================
using HostLogsWPFApp.Helpers;
using HostLogsWPFApp.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace HostLogsWPFApp.Logic
{
    public interface ISqlLogRepository
    {
        Task<List<RequestResponseLogModel>> GetLogsByYearAndMonthAsync(string environment, int year, int month);
    }

    public class RetrieveLogsByYearManager
    {
        private readonly ISqlLogRepository _logRepository;

        public List<AccountModel> AccountList { get; private set; }
        public List<string> AccessNumsList { get; private set; }
        public List<string> RequestTypesList { get; private set; }
        public List<RequestResponseLogModel> AllLogs { get; private set; }

        public RetrieveLogsByYearManager(ISqlLogRepository logRepository)
        {
            _logRepository = logRepository ?? throw new ArgumentNullException(nameof(logRepository));
        }

        public async Task<List<RequestResponseLogModel>> GetLogsAsync(
            string environment,
            int year,
            int month,
            ProgressBarHandler<RequestResponseLogModel> progressHandler = null)
        {
            var logs = await _logRepository.GetLogsByYearAndMonthAsync(environment, year, month);
            progressHandler?.SetMaxItems(logs.Count);

            var result = new List<RequestResponseLogModel>();
            foreach (var log in logs)
            {
                result.Add(log);
                progressHandler?.IncrementProgress();
            }

            AllLogs = result;
            return result;
        }
    }
}
