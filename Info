
using HostLogsWPFapp;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace HostLogsWPFApp.DataFromSQLite
{
    public partial class EncoreLogsWindow : Window, INotifyPropertyChanged
    {
        private readonly EncoreLogsManager logManager = new();
        public ObservableCollection<EncoreLogModel> EncoreLogs { get; set; } = new();

        private List<EncoreLogModel> logsList;
        private EncoreLogModel selectedLog;
        private List<TypesDbModel> requestTypesList;
        private List<UserIDsDbModel> userIDsList;
        private string selectedUserID;
        private string selectedRequestType;
        public string Environment;

        private int itemCount;
        public int ItemCount
        {
            get => itemCount;
            set { itemCount = value; OnPropertyChanged(); }
        }

        private int progressValue;
        public int ProgressValue
        {
            get => progressValue;
            set { progressValue = value; OnPropertyChanged(); }
        }

        private int filterProgressValue;
        public int FilterProgressValue
        {
            get => filterProgressValue;
            set { filterProgressValue = value; OnPropertyChanged(); }
        }

        private bool isLoading;
        public bool IsLoading
        {
            get => isLoading;
            set { isLoading = value; OnPropertyChanged(); }
        }

        public EncoreLogsWindow()
        {
            InitializeComponent();
            DataContext = this;
        }

        private async void EncoreLogsWindowX_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                await logManager.RetrieveRequestTypesAsync();
                await logManager.RetrieveUserIDsAsync();
                await logManager.LoadLogsAsync();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void btnLoadLogs_Click(object sender, RoutedEventArgs e)
        {
            await FilterLogs();
        }

        private async Task FilterLogs()
        {
            Mouse.OverrideCursor = Cursors.Wait;
            IsLoading = true;
            FilterProgressValue = 0;

            try
            {
                string accessNumber = txtAccessNumber.Text.Trim();
                string accountNumber = txtAccountNumber.Text.Trim();
                string logId = txtLogId.Text.Trim();
                string userId = selectedUserID;
                string requestType = selectedRequestType;

                var filtered = EncoreLogs;
                int total = filtered.Count;
                int current = 0;

                var progress = new Progress<int>(value => FilterProgressValue = value);
                List<EncoreLogModel> result = new();

                await Task.Run(() =>
                {
                    foreach (var log in filtered)
                    {
                        bool match = true;

                        if (!string.IsNullOrWhiteSpace(accessNumber))
                            match &= log.FullMessage?.IndexOf(accessNumber, StringComparison.OrdinalIgnoreCase) >= 0;

                        if (!string.IsNullOrWhiteSpace(accountNumber))
                            match &= log.FullMessage?.IndexOf(accountNumber, StringComparison.OrdinalIgnoreCase) >= 0;

                        if (!string.IsNullOrWhiteSpace(userId))
                            match &= log.UserID == userId;

                        if (!string.IsNullOrWhiteSpace(requestType))
                            match &= log.FullMessage?.IndexOf(requestType, StringComparison.OrdinalIgnoreCase) >= 0;

                        if (!string.IsNullOrWhiteSpace(logId))
                            match &= log.EventID.ToString().Contains(logId);

                        if (match)
                            result.Add(log);

                        current++;
                        int percent = (int)((double)current / total * 100);
                        ((IProgress<int>)progress).Report(percent);
                    }
                });

                Application.Current.Dispatcher.Invoke(() =>
                {
                    LogsListView.ItemsSource = result;
                    ItemCount = result.Count;
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error filtering logs: {ex.Message}");
            }
            finally
            {
                Mouse.OverrideCursor = null;
                IsLoading = false;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = "") =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
