using HostLogsWPFApp.Helpers;
using HostLogsWPFApp.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace HostLogsWPFApp.Logic
{
    public class RetrieveLogsByYearManager : INotifyPropertyChanged
    {
        public ObservableCollection<RequestResponseLogModel> EncoreLogs { get; set; } = new();
        private List<RequestResponseLogModel> logsList = new();

        public List<AccountModel> accountList { get; private set; } = new();
        public List<string> accessNumsList { get; private set; } = new();
        public List<string> requestTypesList { get; private set; } = new();
        public List<RequestResponseLogModel>? AllLogs { get; private set; }

        private int itemCount;
        public int ItemCount
        {
            get => itemCount;
            set { itemCount = value; OnPropertyChanged(); }
        }

        private int progressValue;
        public int ProgressValue
        {
            get => progressValue;
            set { progressValue = value; OnPropertyChanged(); }
        }

        private int filterProgressValue;
        public int FilterProgressValue
        {
            get => filterProgressValue;
            set { filterProgressValue = value; OnPropertyChanged(); }
        }

        private bool isLoading;
        public bool IsLoading
        {
            get => isLoading;
            set { isLoading = value; OnPropertyChanged(); }
        }

        public string Environment { get; set; } = "";
        public string selectedYear { get; set; } = "";
        public string selectedMonth { get; set; } = "";

        public event PropertyChangedEventHandler? PropertyChanged;
        private void OnPropertyChanged([CallerMemberName] string propertyName = "")
            => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));

        private DbContext OpenDatabase()
        {
            var dbHelper = new DbContextFactoryHelper();
            return dbHelper.InitializeDbContextFactory(Environment);
        }

        public async Task<List<RequestResponseLogModel>> GetLogsAsync()
        {
            IsLoading = true;
            ProgressValue = 0;
            EncoreLogs.Clear();
            ItemCount = 0;

            var dbContext = OpenDatabase();
            if (dbContext == null)
            {
                IsLoading = false;
                throw new FileNotFoundException("Database not found.");
            }

            int year = int.Parse(selectedYear);
            int month = DateTime.ParseExact(selectedMonth, "MMMM", CultureInfo.InvariantCulture).Month;

            var logs = await dbContext.Set<EventDetailsModel>()
                .Where(e => e.DateTimeStamp.Year == year && e.DateTimeStamp.Month == month)
                .Select(e => new RequestResponseLogModel
                {
                    EventID = e.EventID,
                    FullMessage = e.EventDesc,
                    UserID = e.UserID,
                    DateTimeStamp = e.DateTimeStamp,
                    Environment = Environment
                })
                .ToListAsync();

            logs = logs.OrderByDescending(x => x.DateTimeStamp).ToList();
            int maxItems = logs.Count;

            var progress = new Progress<RequestResponseLogModel>(log =>
            {
                EncoreLogs.Add(log);
                ItemCount = EncoreLogs.Count;
                ProgressValue = (int)((double)ItemCount / maxItems * 100);
            });

            await foreach (var log in logs.ToAsyncEnumerable())
            {
                progress.Report(log);
                await Task.Delay(1);
            }

            logsList = EncoreLogs.ToList();
            AllLogs = logsList;
            IsLoading = false;

            return logsList;
        }

        public AccountModel GetDistinctAccountNumbers(List<RequestResponseLogModel> logs)
        {
            var extract = new ExtractAccountNums();
            accountList = extract.ExtractAccountAndType(logs);
            return accountList.FirstOrDefault();
        }

        public List<string> GetDistinctRequestTypes(List<RequestResponseLogModel> logs)
        {
            var extract = new ExtractTypes();
            var result = extract.ReadRequestTypesOnly(logs);
            requestTypesList = result.Select(x => x.Type).Distinct().ToList();
            return requestTypesList;
        }

        public List<string> GetDistinctAccessNumbers(List<RequestResponseLogModel> logs)
        {
            var extract = new ExtractAccessNums();
            var result = extract.ExtractAccessNumbersOnly(logs);
            accessNumsList = result.Select(x => x.AccessNumber).Distinct().ToList();
            return accessNumsList;
        }
    }
}
