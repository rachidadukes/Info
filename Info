public async Task<List<LogAccountsModel>> SearchAccountsFromDb(
    DbContextSQLite dbContext, 
    bool boolAcctWithBalance, 
    string accountNumber, 
    string accessNumber)
{
    try
    {
        // Get distinct accounts from LogAccounts
        var acctsQuery = dbContext.LogAccounts
            .GroupBy(s => new { s.AccountNumber, s.AccountType, s.Environment })
            .Select(g => g.First());

        // Apply filters early (more efficient)
        if (!string.IsNullOrWhiteSpace(accountNumber))
        {
            acctsQuery = acctsQuery.Where(s => s.AccountNumber.Contains(accountNumber));
        }

        if (!string.IsNullOrWhiteSpace(accessNumber))
        {
            acctsQuery = acctsQuery.Where(s => s.AccessNumber.Contains(accessNumber));
        }

        var accts = await acctsQuery.ToListAsync();

        // If we don't care about balance, return here
        if (!boolAcctWithBalance)
            return accts;

        // Filter only accounts with balance
        var balanceAccounts = await dbContext.AccountBalance
            .Where(b => EF.Functions.Like(b.AvlBal, "%")) // Optional: Filter out non-numeric strings if needed
            .Where(b => Convert.ToDecimal(b.AvlBal) > 0)
            .Select(b => new { b.AccountNumber, b.AccessNumber, b.AcctType, b.Environment })
            .ToListAsync();

        var filtered = accts.Where(acct =>
            balanceAccounts.Any(b => 
                b.AccountNumber == acct.AccountNumber &&
                b.AccessNumber == acct.AccessNumber &&
                b.AcctType == acct.AccountType &&
                b.Environment == acct.Environment)).ToList();

        return filtered;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[LOG ERROR] Failed to retrieve accounts from DB: {ex.Message}");
        return new List<LogAccountsModel>();
    }
}
