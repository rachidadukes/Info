public class RestService
{
    public async Task<string> GetResponseFromNewAPI(string xml)
    {
        var settings = HostRoutingConfig.GetHostSettings();
        string? endpointUrl;
        string response;

        try
        {
            endpointUrl = settings["MessageConverterURL"];

            if (string.IsNullOrEmpty(endpointUrl))
                throw new InvalidOperationException("MessageConverterURL not configured in appsettings.json.");

            // ✅ Modern approach: configure TLS on the handler instead of ServicePointManager
            var handler = new HttpClientHandler
            {
                // Allow both TLS 1.2 and 1.3
                SslProtocols = System.Security.Authentication.SslProtocols.Tls12 |
                               System.Security.Authentication.SslProtocols.Tls13
            };

            // ✅ Load and attach client certificate
            var cert = CertificateLoader.GetCertificate(); // subject-name lookup from config
            handler.ClientCertificates.Add(cert);

            // ⚠️ TEMPORARY TRANSCODE OVERRIDE FOR TESTING
            // (remove this block once the environment stabilizes)
            var x = XDocument.Parse(xml);
            var tc = x.Descendants("TranCode").FirstOrDefault();
            if (tc != null)
            {
                // Force to 1001 for testing; change to 1002 if needed
                tc.Value = "1001";
                xml = x.ToString(SaveOptions.DisableFormatting);
            }

            using var client = new HttpClient(handler)
            {
                BaseAddress = new Uri(endpointUrl),
                Timeout = TimeSpan.FromSeconds(60)
            };

            var content = new StringContent(xml, System.Text.Encoding.UTF8, "application/xml");
            var httpResponse = await client.PostAsync(string.Empty, content);

            httpResponse.EnsureSuccessStatusCode();

            response = await httpResponse.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error while calling MessageConverter API: {ex.Message}", ex);
        }

        return response;
    }
}
