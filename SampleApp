samples


private async Task<string> GetAccountTypes(DbContextSQLite dbContext, List<LogDetailsModel> allLogs)
{
    try
    {
        // 1) Unique list in memory
        var uniqueItems = allLogs
            .GroupBy(s => new { s.AccountType, s.Environment })
            .Where(g => !string.IsNullOrEmpty(g.Key.AccountType))
            .Select(g => g.First())
            .ToList();

        var message = $"{uniqueItems.Count} Account Types found";

        // 2) Map once
        var types = uniqueItems.Select(log => new AccountTypesModel
        {
            Environment = log.Environment,
            AccountType = log.AccountType
        }).ToList();

        // 3) Bulk replace atomically
        using var tx = await dbContext.Database.BeginTransactionAsync();

        dbContext.ChangeTracker.AutoDetectChangesEnabled = false;
        try
        {
            await dbContext.Database.ExecuteSqlRawAsync("DELETE FROM AccountTypes");   // clear once

            await dbContext.Set<AccountTypesModel>().AddRangeAsync(types);             // insert all
            await dbContext.SaveChangesAsync();                                        // one save

            await tx.CommitAsync();
        }
        finally
        {
            dbContext.ChangeTracker.AutoDetectChangesEnabled = true;
        }

        return message;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error while saving changes: {ex.Message}");
        if (ex.InnerException != null)
            Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
        return "";
    }
}
