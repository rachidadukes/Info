samples



private async Task<string> GetUsers(DbContextSQLite dbContext, List<LogDetailsModel> allLogs)
{
    try
    {
        // 1) dedupe in memory
        var unique = allLogs
            .Where(x => !string.IsNullOrEmpty(x.UserID))
            .GroupBy(x => new { x.UserID, x.Environment })
            .Select(g => g.First())
            .ToList();

        var message = $"{unique.Count} Users found";

        // 2) map once
        var users = unique.Select(x => new UsersModel
        {
            Environment = x.Environment,
            UserID      = x.UserID
        }).ToList();

        // 3) atomic bulk replace
        using var tx = await dbContext.Database.BeginTransactionAsync();

        dbContext.ChangeTracker.AutoDetectChangesEnabled = false;
        try
        {
            await dbContext.Database.ExecuteSqlRawAsync("DELETE FROM UserIDs"); // clear once
            await dbContext.Set<UsersModel>().AddRangeAsync(users);             // add all
            await dbContext.SaveChangesAsync();                                 // one save
            await tx.CommitAsync();
        }
        finally
        {
            dbContext.ChangeTracker.AutoDetectChangesEnabled = true;
        }

        return message;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error while saving changes: {ex.Message}");
        if (ex.InnerException != null)
            Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
        return "";
    }
}
