samples

private async Task<string> GetRequestType(DbContextSQLite dbContext, List<LogDetailsModel> allLogs)
{
    try
    {
        // 1) group and dedupe in memory
        var uniqueItems = allLogs
            .Where(s => !string.IsNullOrEmpty(s.RequestType))
            .GroupBy(s => new { s.RequestType, s.Environment })
            .Select(g => g.First())
            .ToList();

        var message = $"{uniqueItems.Count} Request Types found";

        // 2) project to entity model
        var types = uniqueItems.Select(log => new RequestTypesModel
        {
            Environment = log.Environment,
            RequestType = log.RequestType
        }).ToList();

        // 3) bulk replace atomically
        using var tx = await dbContext.Database.BeginTransactionAsync();

        dbContext.ChangeTracker.AutoDetectChangesEnabled = false;
        try
        {
            await dbContext.Database.ExecuteSqlRawAsync("DELETE FROM RequestTypes");   // clear table once
            await dbContext.Set<RequestTypesModel>().AddRangeAsync(types);              // insert all
            await dbContext.SaveChangesAsync();                                         // one save
            await tx.CommitAsync();
        }
        finally
        {
            dbContext.ChangeTracker.AutoDetectChangesEnabled = true;
        }

        return message;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå Error while saving changes: {ex.Message}");
        if (ex.InnerException != null)
            Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
        return "";
    }
}
