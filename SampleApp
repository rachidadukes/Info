samples

public void DisplayXmlFormatted(string xml, string tranCodeToBold)
{
    txtRequest.Document.Blocks.Clear();
    xml = PrettyPrintXml(xml);

    Paragraph paragraph = new Paragraph();

    foreach (var line in xml.Split('\n'))
    {
        Run run = new Run(line + "\n");

        if (line.Contains($"<TranCode>{tranCodeToBold}</TranCode>"))
        {
            run.FontWeight = FontWeights.Bold;
            run.Foreground = Brushes.DarkBlue;
        }

        paragraph.Inlines.Add(run);
    }

    txtRequest.Document.Blocks.Add(paragraph);
}


=================================
if (line.Contains("<EmployeeId>"))
    run.Foreground = Brushes.Purple;
if (line.Contains("<EnvironmentName>"))
    run.FontWeight = FontWeights.Bold;


=============================
 public void DisplayXmlFormatted(string xml)
{
    txtRequest.Document.Blocks.Clear();
    xml = PrettyPrintXml(xml);

    Paragraph paragraph = new Paragraph();

    foreach (var line in xml.Split('\n'))
    {
        Run run = new Run(line + "\n");

        // ðŸ‘‰ Detect the line that contains <TranCode>
        if (line.Contains("<TranCode>"))
        {
            run.FontWeight = FontWeights.Bold;
            run.Foreground = Brushes.DarkBlue;
        }
        else if (line.TrimStart().StartsWith("<") && !line.TrimStart().StartsWith("</"))
        {
            run.Foreground = Brushes.DodgerBlue;  // opening tag color
        }
        else if (line.TrimStart().StartsWith("</"))
        {
            run.Foreground = Brushes.OrangeRed;   // closing tag color
        }
        else
        {
            run.Foreground = Brushes.Black;       // normal text
        }

        paragraph.Inlines.Add(run);
    }

    txtRequest.Document.Blocks.Add(paragraph);
}
