public async Task<HttpCallResult> ReadXMLresponse(
    string soapXmlStringRequest,
    string endpoint,
    string? soapAction = null,
    CancellationToken ct = default)
{
    try
    {
        using var content = new StringContent(soapXmlStringRequest, Encoding.UTF8, "text/xml");
        using var request = new HttpRequestMessage(HttpMethod.Post, endpoint) { Content = content };

        if (!string.IsNullOrWhiteSpace(soapAction))
            request.Headers.Add("SOAPAction", $"\"{soapAction}\"");
        request.Headers.Accept.ParseAdd("text/xml");

        // Read full content to sidestep streaming IO quirks while we debug
        using var response = await _http.SendAsync(request, HttpCompletionOption.ResponseContentRead, ct);

        string body = "";
        if (response.Content != null)
        {
            try
            {
                body = await response.Content.ReadAsStringAsync(ct);
            }
            catch
            {
                // Fallback if charset is bad or ReadAsStringAsync throws
                var bytes = await response.Content.ReadAsByteArrayAsync(ct);
                var charset = response.Content.Headers.ContentType?.CharSet;
                var enc = !string.IsNullOrWhiteSpace(charset) ? Encoding.GetEncoding(charset) : Encoding.UTF8;
                body = enc.GetString(bytes);
            }
        }

        return new HttpCallResult(
            IsSuccess: response.IsSuccessStatusCode,
            StatusCode: (int)response.StatusCode,
            Body: body,
            ErrorMessage: response.IsSuccessStatusCode ? null :
                $"HTTP {(int)response.StatusCode} {response.ReasonPhrase}");
    }
    catch (OperationCanceledException) when (ct.IsCancellationRequested)
    {
        return new HttpCallResult(false, null, "", "Request was canceled.");
    }
    catch (TaskCanceledException)
    {
        return new HttpCallResult(false, null, "", "Request timed out.");
    }
    catch (HttpRequestException ex)
    {
        return new HttpCallResult(false, null, "", $"HTTP error: {ex.Message}");
    }
    catch (Exception ex)
    {
        return new HttpCallResult(false, null, "", $"Unexpected error: {ex.Message}");
    }
}
