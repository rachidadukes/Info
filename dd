SAMPLE
============================


private async Task<string> SendAndReceive(string sSendMessage)
{
    string sRecvMessage = string.Empty;
    StringReader txtReader = null;
    XmlReader xmlReader = null;
    FinancialPostingWsClient client = null;

    try
    {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

        // Load endpoint from appsettings.json
        var settings = HostRoutingConfig.GetHostSettings();
        string endpointUrl = settings["HostURL"];

        // Deserialize XML into CreditAddRq object
        var reqSerializer = new XmlSerializer(typeof(CreditAddRq));
        txtReader = new StringReader(EnsureNamespaces(sSendMessage));
        xmlReader = XmlReader.Create(txtReader);
        var oRq = (CreditAddRq)reqSerializer.Deserialize(xmlReader);

        // Build binding & endpoint
        var binding = new BasicHttpBinding(BasicHttpSecurityMode.Transport);
        binding.MaxReceivedMessageSize = 1024 * 1024;
        binding.Security.Mode = BasicHttpSecurityMode.Transport;
        binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.None;

        var address = new EndpointAddress(endpointUrl);

        // Initialize WCF client
        client = new FinancialPostingWsClient(binding, address);

        // Build request message for deposit operation
        var request = new DepositRequestMessage { CreditAddRq = oRq };

        // Call the async deposit operation
        var responseMsg = await client.depositAsync(request);

        // Serialize response message to XML
        var respSerializer = new XmlSerializer(typeof(DepositResponseMessage));
        using var sw = new StringWriter();
        respSerializer.Serialize(sw, responseMsg);
        sRecvMessage = sw.ToString();
    }
    catch (FaultException fe)
    {
        Console.WriteLine("[SOAP FAULT] " + fe.Message);
        return $"<Error>{SecurityElement.Escape(fe.Message)}</Error>";
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[ERROR] SendAndReceive failed: {ex.Message}");
        Console.WriteLine(ex.StackTrace);
        return $"<Error>{SecurityElement.Escape(ex.Message)}</Error>";
    }
    finally
    {
        xmlReader?.Dispose();
        txtReader?.Dispose();

        if (client != null && client.State == CommunicationState.Opened)
        {
            await client.CloseAsync();
        }
    }

    return sRecvMessage;
}
