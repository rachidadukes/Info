Declare the section (near the top, inside <configuration>):
<configSections>
  <section name="hostRouting"
           type="System.Configuration.NameValueSectionHandler" />
</configSections>

=================================================

Add the section instance (anywhere under <configuration>, e.g. above <appSettings>):
<hostRouting>
  <add key="RoutingFlag" value="true" />
  <add key="HostTranCodes"
       value="1806,1807,1810,1906,1907,1910,2906,2907,2910,3101,3102,3103,3104,3111,3112,3113,3201,3202,3203,3211,3212,3213,3901,3902,3903,3904,3911,3912,3913,4000,4001,4002,4010,4011,4012,4901,4902,4903" />
</hostRouting>
==============================================================
============================================================

Imports System.Configuration
Imports System.Xml.Linq

Public Function ShouldRouteToConverterEndpoint(xml As String) As Boolean
    ' --- NEW: read flag and codes from <hostRouting> ---
    Dim section = TryCast(ConfigurationManager.GetSection("hostRouting"), Specialized.NameValueCollection)

    Dim routingFlag As Boolean = False
    If section IsNot Nothing Then
        Boolean.TryParse(section("RoutingFlag"), routingFlag)
    End If
    If Not routingFlag Then
        Return False
    End If

    Dim codesCsv As String = If(If(section IsNot Nothing, section("HostTranCodes"), Nothing), String.Empty)
    If String.IsNullOrWhiteSpace(codesCsv) Then
        Return False
    End If
    Dim codes As New HashSet(Of String)(
        codesCsv.Split(New Char() {","c}, StringSplitOptions.RemoveEmptyEntries).
                 Select(Function(s) s.Trim()),
        StringComparer.Ordinal
    )
    ' --- END NEW ---

    ' Existing XML extraction (unchanged)
    Dim doc As XDocument = XDocument.Parse(xml)
    Dim tranCode As String = doc.Descendants("TranCode").FirstOrDefault()?.Value?.Trim()

    If String.IsNullOrEmpty(tranCode) Then
        Return False
    End If

    ' Only route when the code is configured
    Return codes.Contains(tranCode)
End Function


