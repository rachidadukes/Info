
// Before long ops
LogHistory.Write("[yellow]Retrieving members...[/]");

// Inside your Status spinner
AnsiConsole.Status().Start("Processing...", _ =>
{
    LogHistory.Write("[green]Step 1 complete[/]");
});

// After SelectionPrompt (which clears the screen)
var selected = AnsiConsole.Prompt(prompt);
LogHistory.Write($"Selected: {selected.AccessNumber} ({selected.Environment})");
LogHistory.Reprint(); // <- brings back everything you've logged so far

====================================

// LogHistory.cs
using System.Collections.Concurrent;
using Spectre.Console;

public static class LogHistory
{
    private static readonly ConcurrentQueue<string> _lines = new();

    // Add and print immediately (keeps history + shows user)
    public static void Write(string markup)
    {
        _lines.Enqueue(markup);
        AnsiConsole.MarkupLine(markup);
    }

    // Add without printing (useful during silent phases)
    public static void Add(string markup) => _lines.Enqueue(markup);

    // Snapshot if you need it
    public static IReadOnlyCollection<string> Snapshot() => _lines.ToArray();

    // Re-print everything (e.g., after SelectionPrompt clears the screen)
    public static void Reprint()
    {
        AnsiConsole.Clear();
        foreach (var line in _lines)
            AnsiConsole.MarkupLine(line);
    }
}
