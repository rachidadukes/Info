using System.Net.Http;
using System.Text;
using System.Xml.Linq;

namespace MemberSearchConsoleApp
{
    public static class MessageRouter
    {
        // Adjust this set when ST allows more TranCodes.
        private static readonly HashSet<string> StTranCodes = new() { "1001", "1002" };

        public static bool ShouldRouteToST(string xml)
        {
            try
            {
                var x = XDocument.Parse(xml);
                var tran = x.Descendants("TranCode").FirstOrDefault()?.Value?.Trim();
                return !string.IsNullOrEmpty(tran) && StTranCodes.Contains(tran);
            }
            catch { return false; }
        }

        public static async Task<string> SendToSTAsync(
            string xml,
            string endpointUrl,
            int timeoutSeconds,
            bool forceTranCode = false,
            string forceValue = "1001",
            CancellationToken ct = default)
        {
            // TEMP override (mirrors your VB block). Delete when env stabilizes.
            if (forceTranCode && !string.IsNullOrWhiteSpace(forceValue))
            {
                try
                {
                    var xdoc = XDocument.Parse(xml);
                    var tc = xdoc.Descendants("TranCode").FirstOrDefault();
                    if (tc != null)
                    {
                        tc.Value = forceValue.Trim();
                        xml = xdoc.ToString(SaveOptions.DisableFormatting);
                    }
                }
                catch { /* swallow â€“ send original xml */ }
            }

            using var http = new HttpClient { Timeout = TimeSpan.FromSeconds(timeoutSeconds) };
            using var content = new StringContent(xml, Encoding.UTF8, "application/xml");
            using var resp = await http.PostAsync(endpointUrl, content, ct);
            var body = await resp.Content.ReadAsStringAsync(ct);
            resp.EnsureSuccessStatusCode();
            return body;
        }
    }
}
